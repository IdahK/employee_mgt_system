package com.example.employeemgtsystem.controllers;

import com.example.employeemgtsystem.EmployeeMgtSystemApplication;
import com.example.employeemgtsystem.dto.EmployeeDto;
import com.example.employeemgtsystem.repository.EmployeeRepository;
import com.example.employeemgtsystem.service.EmployeeServiceI;
import org.instancio.Instancio;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.instancio.Select.field;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ContextConfiguration(classes = EmployeeMgtSystemApplication.class)
@ActiveProfiles({"test"})
//@PropertySource("application-test.properties")
class EmployeeControllerIT {

    @Autowired
    private EmployeeServiceI employeeService;

    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private EmployeeRepository employeeRepository;

    @BeforeEach
    public void before(){
        System.out.println("Before Each Test");
        employeeRepository.deleteAll().subscribe();
    }

    @Test
    public void saveEmployee(){
        EmployeeDto mockEmployee = Instancio.of(EmployeeDto.class)
                .ignore(field(EmployeeDto::getId)) //id is autogenerated
                .create();

        webTestClient.post().uri("/employees/create")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .body(Mono.just(mockEmployee), EmployeeDto.class)
                .exchange()
                .expectStatus().isCreated()
                .expectBody()
                .consumeWith(System.out::println)
                .jsonPath("$.name").isEqualTo(mockEmployee.getName())
                .jsonPath("$.salary").isEqualTo(mockEmployee.getSalary())
                .jsonPath("$.id").isNotEmpty();

    }

    @Test
    public void getEmployee(){
        EmployeeDto mockEmployee = Instancio.of(EmployeeDto.class)
                .ignore(field(EmployeeDto::getId))
                .create();

        EmployeeDto savedEmployee = employeeService.create(mockEmployee).block();

        webTestClient.get().uri("/employees/{id}",
                        Collections.singletonMap("id", savedEmployee.getId()))
                .exchange()
                .expectStatus().isOk()
                .expectBody()
                .consumeWith(System.out::println)
                .jsonPath("$.id").isEqualTo(savedEmployee.getId())
                .jsonPath("$.name").isEqualTo(mockEmployee.getName())
                .jsonPath("$.salary").isEqualTo(mockEmployee.getSalary());
    }

    @Test
    public void fetchAllEmployees(){
        List<EmployeeDto> list = Instancio.ofList(EmployeeDto.class)
                .size(10)
                .ignore(field(EmployeeDto::getId))
                .create();

        List<EmployeeDto> savedList = new ArrayList<>();

        for(EmployeeDto employee: list){
            savedList.add(employeeService.create(employee).block());
        }

        webTestClient.get().uri("/employees")
                .accept(MediaType.APPLICATION_JSON)
                .exchange()
                .expectStatus().isOk()
                .expectBodyList(EmployeeDto.class)
                .consumeWith(System.out::println);
    }

    @Test
    public void updateEmployee(){
        EmployeeDto employeeToUpdate = Instancio.of(EmployeeDto.class)
                .ignore(field(EmployeeDto::getId))
                .create();

        employeeToUpdate = employeeService.create(employeeToUpdate).block();
        System.out.println("Initial employee data: " + employeeToUpdate);

        String employeeId = employeeToUpdate.getId();

        employeeToUpdate.setSalary(490289L);

        webTestClient.put().uri("/employees/update/{id}",
                Collections.singletonMap("id", employeeId))
                .accept(MediaType.APPLICATION_JSON)
                .body(Mono.just(employeeToUpdate), EmployeeDto.class)
                .exchange()
                .expectStatus().isOk()
                .expectBody()
                .consumeWith(System.out::println)
                .jsonPath("$.salary").isEqualTo(employeeToUpdate.getSalary());
    }

    @Test
    public void deleteEmployee(){
        EmployeeDto employeeToDelete = Instancio.of(EmployeeDto.class)
                .ignore(field(EmployeeDto::getId))
                .create();

        employeeToDelete = employeeService.create(employeeToDelete).block();

        webTestClient.delete().uri("/employees/delete/{id}",
                        Collections.singletonMap("id", employeeToDelete.getId()))
                .exchange()
                .expectStatus().isNoContent()
                .expectBody()
                .consumeWith(System.out::println);

    }

}